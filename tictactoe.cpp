#include <iostream>
#include <cstring>

using namespace std;

/*
Code by Michael Yan 10/
This code will run a simple tic tac toe game, its graphics generated by a 2-d array drawn using text.
*/

void drawBoard(int board[3][3]) {
	int blank = 0;//initializing variables to manipulate game
	int x_marker = 1;
	int x_turn = 0;
	int x_wins = 0;
	int o_marker = 2;
	int o_turn = 1;
	int o_wins = 0;

	cout << "\n\t1\t2\t3" << endl; //drawing horizontal board (1,2,3)

	for(int i = 0; i < 3; i++) {
		char out = (char)('a' + i );//drawing vertical board (a,b,c)
		cout << out << "\t";
		for(int j = 0; j < 3; j++) {//creating the actual graphics of the markers
			if(board[i][j] == blank) {
				cout << " \t";
			} else if(board[i][j] == x_marker) {
				cout << "X\t";
			} else if(board[i][j] == o_marker) {
				cout << "O\t";
			}
		} 
	cout << endl;	
	}
	cout << endl;
}

void clearBoard(int board[3][3]) {//clear the board by setting all slots to zero
	int blank = 0;
	for (int row = 0; row < 3; row++) {
		for (int column = 0; column < 3; column++) {
			board[row][column] = blank;
		}
	}
}

bool checkTie(int board[3][3]) {//if the entire board is filled, it is a tie
	int blank = 0;
	for (int row = 0; row < 3; row++) {
		for (int column = 0; column < 3; column++) {
			if(board[row][column] == blank) {
				return false;
			}
		}
	}
	return true;		
}
	
bool checkWin(int player, int board[3][3]) {//checking for all possible win conditions
	if(board[0][0] == player && board[0][1] == player && board[0][2] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[1][0] == player && board[1][1] == player && board[1][2] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[2][0] == player && board[2][1] == player && board[2][2] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[0][0] == player && board[1][0] == player && board[2][0] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[0][1] == player && board[1][1] == player && board[2][1] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[0][2] == player && board[1][2] == player && board[2][2] == player) {
		drawBoard(board);
		return true;
	}		
	if(board[0][0] == player && board[1][1] == player && board[2][2] == player) {
		drawBoard(board);
		return true;
	}
	if(board[0][2] == player && board[1][1] == player && board[0][2] == player) {
		drawBoard(board);
		return true;
	}
	//if none of the win conditions met, continue
	return false;
}

int main() {//main function
	char userInput[10];//initializing variables to manipulate game
	int board[3][3];
	int blank = 0;
	int x_marker = 1;
	int o_marker = 2;
	int x_turn = 0;
	int o_turn = 1;
	int x_wins = 0;
	int o_wins = 0;
	int tie = 0;
	int turn = x_turn;//x goes first
	bool isPlaying = true;
	int firstDraw = 1;
	clearBoard(board);
	while(isPlaying){
		drawBoard(board);
		if(firstDraw == 1){//initial prompt
			cout << "Place your marker on the board using the following notation: (letter)(number) like a1, b2, c3, etc." << endl;
			firstDraw = 0;
		}
		if(turn == x_turn){
			cout << "It's X's turn: ";
		}
		else{
			cout << "It's O's turn: ";
		}
		cin >> userInput;
		//makes sure the user provides a readable input
		if(strlen(userInput) != 2) {
			cout << "Your input must follow this notation: (letter)(number) like a1, a2, a3, etc." << endl;
		}
		else if(userInput[0] != 'a' && userInput[0] != 'b' && userInput[0] != 'c'){
			cout << "Your input must follow this notation: (letter)(number) like a1, a2, a3, etc." << endl;
		}
		else if(userInput[1] != '1' && userInput[1] != '2' && userInput[1] != '3'){
			cout << "Your input must follow this notation: (letter)(number) like a1, a2, a3, etc." << endl;
		}
		else {//place the marker down in empty spot
			int row = (char)(userInput[0] -  'a');
			int column = (char)( userInput[1] - '1');
			if(board[row][column] == blank) {
				if(turn == x_turn) {
					board[row][column] = x_marker;
					turn = o_turn;
				} 
				else {
					board[row][column] = o_marker;
					turn = x_turn;
				}	
			}
			else {
			cout << "You can't put your marker on top of a marker." << endl;
			}
		}//check for win after every redraw
		if(checkWin(x_marker, board)) {//when X wins
			clearBoard(board);
			x_wins++;
			turn = x_turn;
			cout << "X won!" << endl;
			cout << endl;
			cout << "Scoreboard:" << endl;
			cout <<"Player X Wins: " << x_wins << "\tPlayer O Wins: " << o_wins << "\tTies: " << tie << endl;
		} 
		else if(checkWin(o_marker, board)) {//when Y wins
			clearBoard(board);
			o_wins++;
			turn = x_turn;
			cout << "O won!" << endl;
			cout << endl;
			cout << "Scoreboard:" << endl;
			cout << "X Wins: " << x_wins << "\tO Wins: " << o_wins << "\tTies: " << tie << endl;
		} 
		else if(checkTie(board)) {//when there is a tie
			tie++;
			clearBoard(board);
				turn = x_turn;
			cout << "It's a tie!" << endl;
			cout << endl;
			cout << "Scoreboard:" << endl;
			cout << "X Wins: " << x_wins << "\tO Wins: " << o_wins << "\tTies: " << tie << endl; 
		}
	}
}	
